#include <behaviors.dtsi>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#include <dt-bindings/zmk/ext_power.h>

#define _ &kp
#define ___ &none
#define ______ &trans

#define EN 0
#define RU 1
#define GAM 2
#define GFN 3
#define SYMEN 4
#define SYMRU 5
#define NAVEN 6
#define NAVRU 7
#define NUM 8

#define MEH(key) LS(LC(LA(key)))

#define SQT GRAVE
#define DQT LS(GRAVE)
#define GRV RA(GRAVE)
#define PIP LS(BSLH)
#define BSL RA(BSLH)
#define NBSP RA(SPACE)

#define NSPC LC(LG(RIGHT))
#define PSPC LC(LG(LEFT))

// custom implementation of modified callum-mods,
// which can be released on second keypress
// and also work with swapper and/or tabber

#define PARAM_1 0
#define PARAM_2 0

#define MACRO(NAME, COMPATIBLE, BINDING_CELLS, BINDINGS) \
    NAME: NAME { \
        compatible = COMPATIBLE; \
        #binding-cells = <BINDING_CELLS>; \
        wait-ms = <0>; \
        tap-ms = <0>; \
        bindings = \
            <BINDINGS>; \
    };

#define MACRO_NO_PARAM(NAME, BINDINGS)  MACRO(NAME, "zmk,behavior-macro"          , 0, BINDINGS)
#define MACRO_ONE_PARAM(NAME, BINDINGS) MACRO(NAME, "zmk,behavior-macro-one-param", 1, BINDINGS)
#define MACRO_TWO_PARAM(NAME, BINDINGS) MACRO(NAME, "zmk,behavior-macro-two-param", 2, BINDINGS)

#define MAX_TIMER __UINT32_MAX__ // around 50 days

#define STICKY_FOREVER(NAME, BIND) \
    NAME: NAME { \
        compatible = "zmk,behavior-sticky-key"; \
        #binding-cells = <1>; \
        bindings = <BIND>; \
        release-after-ms = <MAX_TIMER>; \
        ignore-modifiers; \
    };

#define MODMORPH(NAME, NORMAL, MORPHED, MODS, KEEP_MODS) \
    NAME: NAME { \
        compatible = "zmk,behavior-mod-morph"; \
        #binding-cells = <0>; \
        bindings = <NORMAL>, <MORPHED>; \
        mods = <(MODS)>; \
        keep-mods = <(KEEP_MODS)>; \
    };

&sk {
        release-after-ms = <60000>;
};

/ {
    behaviors {
        MACRO_ONE_PARAM(
            m_release_key_twice,
            &macro_release
                &macro_param_1to1 &kp PARAM_1
                &macro_param_1to1 &kp PARAM_1
        )


        MACRO_ONE_PARAM(
            m_press_key_twice,
            &macro_press
                &macro_param_1to1 &kp PARAM_1
                &macro_param_1to1 &kp PARAM_1
            &macro_pause_for_release
            &macro_tap
                &m_release_key_twice PARAM_1
        )

        STICKY_FOREVER(sticky_forever, &m_press_key_twice)

        MODMORPH(
            cm_gui,
            &sticky_forever LGUI,
            &m_release_key_twice LGUI,
            MOD_LGUI,
            MOD_LGUI
        )

        MODMORPH(
            cm_alt,
            &sticky_forever LALT,
            &m_release_key_twice LALT,
            MOD_LALT,
            MOD_LALT
        )

        MODMORPH(
            cm_ctrl,
            &sticky_forever LCTRL,
            &m_release_key_twice LCTRL,
            MOD_LCTL,
            MOD_LCTL
        )

        MODMORPH(
            cm_sft,
            &sticky_forever LSHIFT,
            &m_release_key_twice LSHIFT,
            MOD_LSFT,
            MOD_LSFT
        )

        MACRO_TWO_PARAM(
            m_hold_mod_press_key,
            &macro_press
                &macro_param_1to1 &kp PARAM_1
            &macro_tap
                &macro_param_2to1 &kp PARAM_2
        )

        MODMORPH(
            tabber,
            &m_hold_mod_press_key LCTRL TAB,
            &kp TAB,
            MOD_LCTL,
            MOD_LCTL
        )

        MODMORPH(
            swapper_win,
            &m_hold_mod_press_key LALT TAB,
            &kp TAB,
            MOD_LALT,
            MOD_LALT
        )

        MODMORPH(
            swapper_mac,
            &m_hold_mod_press_key LGUI TAB,
            &kp TAB,
            MOD_LGUI,
            MOD_LGUI
        )

        MACRO_ONE_PARAM(
            la,
            &macro_tap
                &kp 0 // do nothing, fire all sticky keys
            &macro_press
                &macro_param_1to1 &mo PARAM_1
            &macro_pause_for_release
            &macro_release
                &macro_param_1to1 &mo PARAM_1
                &kp LSHFT
                &kp LCTRL
                &kp LALT
                &kp LGUI
        )

        lang_ru: lang_ru {
            compatible = "zmk,behavior-macro";
            label = "LANG_RU";
            #binding-cells = <0>;
            bindings = <                                                            
                &kp CAPS
                &tog RU    
            >;
        };
        
        lang_en: lang_en {
            compatible = "zmk,behavior-macro";
            label = "LANG_EN";
            #binding-cells = <0>;
            bindings = <                                              
                &kp CAPS
                &tog EN
            >;
        };        
    };    
};

/ {
    keymap {
        compatible = "zmk,keymap";

        en_layer {
            bindings = <
_ Q          _ W          _ E          _ R         _ T             _ Y          _ U          _ I          _ O          _ P
_ A          _ S          _ D          _ F         _ G             _ H          _ J          _ K          _ L          _ SEMI
_ Z          _ X          _ C          _ V         _ B             _ N          _ M          _ COMMA      _ DOT        _ FSLH
                                       &la NAVEN   _ SPACE         _ LSFT       &la SYMEN      
            >;
        };

        ru_layer {
            bindings = <
_ Q          _ W          _ E          _ R         _ T             _ Y          _ U          _ I          _ P          _ LBKT
_ A          _ S          _ D          _ F         _ G             _ H          _ J          _ K          _ L          _ SCLN
_ Z          _ X          _ C          _ V         _ B             _ N          _ M          _ COMMA      _ DOT        _ QUOT
                                       &la NAVRU   _ SPACE         _ LSFT       &la SYMRU      
            >;
        };

        gam_layer {
            bindings = <
_ TAB        _ Q          _ W          _ E         _ R             ___          ___          _ UP         ___          _ TAB
_ LSFT       _ A          _ S          _ D         _ F             ___          _ LEFT       _ DOWN       _ RIGHT      _ RSFT
_ LCTRL      _ Z          _ X          _ C         _ V             ___          ___          ___          ___          _ RCTRL
                                       &mo GFN     _ SPACE         &tog GAM     _ PSCRN     
            >;
        };

        gfn_layer {
            bindings = <
_ ESC        _ N1         _ N2         _ N3        _ N4            &out OUT_TOG &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_CLR_ALL
_ LALT       _ N5         _ N6         _ N7        _ N8            ___          ___          ___          ___          ___
_ G          _ J          _ I          _ M         _ T             _ KP_NUM     ___          ___          &sys_reset   &bootloader
                                       ______      _ RET           ______       ______
            >;
        };

        symen_layer {
            bindings = <
_ APOS       _ N7         _ N8         _ N9        _ LS(APOS)      ___          _ LS(N9)       _ BSLH       _ LS(N0)     _ BSPC
_ GRAVE      _ N4         _ N5         _ N6        _ MINUS         _ PLUS       _ LS(LBKT)     _ LS(BSLH)   _ LS(RBKT)   ___
_ LS(GRAVE)  _ N1         _ N2         _ N3        _ UNDER         _ EQUAL      _ LBKT         _ PIP        _ RBKT       _ BSLH
                                       _ N0        _ LSFT          ______      ______
            >;
        };

        symru_layer {
            bindings = <
_ N1         _ N2         _ N3         _ N4        _ N5            _ N6         _ N7         _ N8         _ N9         _ N0
_ SEMI       _ GRV        _ SQT        _ DQT       _ MINUS         _ PLUS       &cm_sft      &cm_ctrl     &cm_alt      &cm_gui
_ BSL        ___          _ LS(LBKT)   _ LBKT      _ UNDER         _ EQUAL      _ RBKT       _ LS(RBKT)   _ PIP        _ BSLH
                                       ______      _ NBSP          ______      ______
            >;
        };

        naven_layer {
            bindings = <
&swapper_mac   &tabber      &swapper_win ___         _ ESC           _ PG_UP        _ HOME       _ END      _ BSPC      _ DEL
&cm_gui        &cm_alt      &cm_ctrl     &cm_sft     _ RET           _ LEFT         _ DOWN       _ UP       _ RIGHT     _ APOS
_ PSPC         _ NSPC       &tog GAM     _ PSCRN     _ TAB           _ PG_DN        _ RET        _ TAB      _ ESC       _ KP_NUM
                                         ______     ______           ______        &lang_ru
            >;
        };

        navru_layer {
            bindings = <
&swapper_mac   &tabber      &swapper_win ___         _ ESC           _ PG_UP        _ HOME       _ END      _ BSPC      _ DEL
&cm_gui        &cm_alt      &cm_ctrl     &cm_sft     _ RET           _ LEFT         _ DOWN       _ UP       _ RIGHT     _ APOS
_ PSPC         _ NSPC       &tog GAM     _ PSCRN     _ TAB           _ PG_DN        _ RET        _ TAB      _ ESC       _ KP_NUM
                                         ______     ______           ______        &lang_en
            >;
        };

        num_layer {
            bindings = <
___          ___          ___          ___         ___               ___          _ F9         _ F10        _ F11        _ F12
&cm_gui      &cm_alt      &cm_ctrl     &cm_sft     ___               ___          _ F5         _ F6         _ F7         _ F8
___          ___          ___          ___         ___               ___          _ F1         _ F2         _ F3         _ F4
                                       ______      ______            ______       ______
            >;
        };
    };
};
